import { db } from '@/db';
import { quizzes } from '@/db/schema';

async function main() {
    const sampleQuizzes = [
        // Lesson 1: JavaScript Basics (3 quizzes)
        {
            lessonId: 1,
            question: 'What is the correct way to declare a variable in JavaScript?',
            options: '["var x = 5", "variable x = 5", "x := 5", "int x = 5"]',
            correctAnswer: 'var x = 5',
            explanation: 'In JavaScript, variables can be declared using var, let, or const keywords. The syntax is keyword followed by the variable name, equals sign, and value.',
            difficulty: 'beginner',
            xpReward: 10,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 1,
            question: 'Which of the following is NOT a valid JavaScript data type?',
            options: '["String", "Number", "Boolean", "Character"]',
            correctAnswer: 'Character',
            explanation: 'JavaScript has primitive data types including String, Number, Boolean, Undefined, Null, Symbol, and BigInt. There is no Character type; single characters are strings.',
            difficulty: 'beginner',
            xpReward: 10,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 1,
            question: 'What does console.log() do in JavaScript?',
            options: '["Displays output in the browser console", "Creates a new variable", "Deletes a variable", "Throws an error"]',
            correctAnswer: 'Displays output in the browser console',
            explanation: 'console.log() is a built-in function that outputs messages to the web console, primarily used for debugging and displaying information during development.',
            difficulty: 'beginner',
            xpReward: 10,
            createdAt: new Date().toISOString(),
        },
        // Lesson 2: Python Fundamentals (3 quizzes)
        {
            lessonId: 2,
            question: 'How do you define a function in Python?',
            options: '["def function_name():", "function function_name():", "func function_name():", "define function_name():"]',
            correctAnswer: 'def function_name():',
            explanation: 'Python uses the def keyword to define functions, followed by the function name, parentheses for parameters, and a colon. The function body is indented.',
            difficulty: 'beginner',
            xpReward: 10,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 2,
            question: 'Which symbol is used for comments in Python?',
            options: '["#", "//", "/* */", "--"]',
            correctAnswer: '#',
            explanation: 'Python uses the hash symbol (#) for single-line comments. Everything after # on that line is ignored by the interpreter.',
            difficulty: 'beginner',
            xpReward: 10,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 2,
            question: 'What will print(type([1, 2, 3])) output?',
            options: '["<class \'list\'>", "<class \'array\'>", "<class \'tuple\'>", "<class \'dict\'>"]',
            correctAnswer: '<class \'list\'>',
            explanation: 'Square brackets [] define a list in Python. The type() function returns the class type of an object, which for [1, 2, 3] is list.',
            difficulty: 'beginner',
            xpReward: 12,
            createdAt: new Date().toISOString(),
        },
        // Lesson 3: HTML & CSS (4 quizzes)
        {
            lessonId: 3,
            question: 'Which HTML tag is used to define the largest heading?',
            options: '["<h1>", "<heading>", "<h6>", "<head>"]',
            correctAnswer: '<h1>',
            explanation: 'HTML provides six heading levels from <h1> to <h6>, where <h1> is the largest and most important heading.',
            difficulty: 'beginner',
            xpReward: 10,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 3,
            question: 'What does CSS stand for?',
            options: '["Cascading Style Sheets", "Computer Style Sheets", "Creative Style Sheets", "Colorful Style Sheets"]',
            correctAnswer: 'Cascading Style Sheets',
            explanation: 'CSS stands for Cascading Style Sheets. The "cascading" refers to the way styles are applied in order of specificity and importance.',
            difficulty: 'beginner',
            xpReward: 10,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 3,
            question: 'How do you select an element with id="header" in CSS?',
            options: '["#header", ".header", "header", "*header"]',
            correctAnswer: '#header',
            explanation: 'In CSS, the hash symbol (#) is used to select elements by their id attribute. IDs should be unique within a page.',
            difficulty: 'beginner',
            xpReward: 12,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 3,
            question: 'Which CSS property is used to change the text color?',
            options: '["color", "text-color", "font-color", "text-style"]',
            correctAnswer: 'color',
            explanation: 'The color property in CSS is used to set the color of text. It accepts various formats including color names, hex codes, RGB, and HSL values.',
            difficulty: 'beginner',
            xpReward: 10,
            createdAt: new Date().toISOString(),
        },
        // Lesson 4: React Basics (4 quizzes)
        {
            lessonId: 4,
            question: 'Which hook is used for managing component state in React?',
            options: '["useState", "useEffect", "useContext", "useReducer"]',
            correctAnswer: 'useState',
            explanation: 'useState is the primary React hook for adding state to functional components. It returns a state variable and a function to update it.',
            difficulty: 'intermediate',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 4,
            question: 'What is JSX in React?',
            options: '["A syntax extension for JavaScript", "A new programming language", "A CSS framework", "A testing library"]',
            correctAnswer: 'A syntax extension for JavaScript',
            explanation: 'JSX is a syntax extension that allows you to write HTML-like code in JavaScript. It makes React code more readable and is transformed to regular JavaScript.',
            difficulty: 'intermediate',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 4,
            question: 'How do you create a component in React?',
            options: '["function ComponentName() { return <div>Content</div> }", "component ComponentName() { return <div>Content</div> }", "create ComponentName() { return <div>Content</div> }", "class ComponentName { return <div>Content</div> }"]',
            correctAnswer: 'function ComponentName() { return <div>Content</div> }',
            explanation: 'React components can be created as functions that return JSX. Function components are the modern approach and work with hooks.',
            difficulty: 'intermediate',
            xpReward: 18,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 4,
            question: 'What is the purpose of useEffect hook?',
            options: '["To perform side effects in components", "To create state variables", "To style components", "To navigate between pages"]',
            correctAnswer: 'To perform side effects in components',
            explanation: 'useEffect is used for side effects like data fetching, subscriptions, or manually changing the DOM. It runs after render and can be controlled with dependencies.',
            difficulty: 'intermediate',
            xpReward: 20,
            createdAt: new Date().toISOString(),
        },
        // Lesson 5: Node.js Basics (3 quizzes)
        {
            lessonId: 5,
            question: 'What is Node.js?',
            options: '["A JavaScript runtime built on Chrome\'s V8 engine", "A JavaScript framework", "A database", "A CSS preprocessor"]',
            correctAnswer: 'A JavaScript runtime built on Chrome\'s V8 engine',
            explanation: 'Node.js is a runtime environment that allows you to run JavaScript on the server side. It uses the V8 JavaScript engine from Chrome.',
            difficulty: 'intermediate',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 5,
            question: 'Which command is used to install packages in Node.js?',
            options: '["npm install", "node install", "npm get", "node get"]',
            correctAnswer: 'npm install',
            explanation: 'npm (Node Package Manager) is the default package manager for Node.js. The install command adds packages to your project.',
            difficulty: 'intermediate',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 5,
            question: 'How do you import a module in Node.js?',
            options: '["const module = require(\'module\')", "import module from \'module\'", "include module", "using module"]',
            correctAnswer: 'const module = require(\'module\')',
            explanation: 'Node.js traditionally uses CommonJS module system with require(). Modern Node.js also supports ES6 import syntax with proper configuration.',
            difficulty: 'intermediate',
            xpReward: 18,
            createdAt: new Date().toISOString(),
        },
        // Lesson 6: Git & GitHub (4 quizzes)
        {
            lessonId: 6,
            question: 'What command creates a new Git repository?',
            options: '["git init", "git create", "git new", "git start"]',
            correctAnswer: 'git init',
            explanation: 'git init initializes a new Git repository in the current directory, creating a .git folder to track changes.',
            difficulty: 'beginner',
            xpReward: 12,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 6,
            question: 'Which command stages changes for commit?',
            options: '["git add", "git stage", "git prepare", "git ready"]',
            correctAnswer: 'git add',
            explanation: 'git add stages changes to be included in the next commit. You can add specific files or use git add . for all changes.',
            difficulty: 'beginner',
            xpReward: 12,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 6,
            question: 'What does git clone do?',
            options: '["Creates a copy of a remote repository", "Deletes a repository", "Merges branches", "Creates a new branch"]',
            correctAnswer: 'Creates a copy of a remote repository',
            explanation: 'git clone creates a local copy of a remote repository, including all files, branches, and commit history.',
            difficulty: 'beginner',
            xpReward: 10,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 6,
            question: 'How do you push changes to a remote repository?',
            options: '["git push", "git upload", "git send", "git commit"]',
            correctAnswer: 'git push',
            explanation: 'git push uploads local commits to a remote repository. You typically specify the remote name and branch, like git push origin main.',
            difficulty: 'beginner',
            xpReward: 12,
            createdAt: new Date().toISOString(),
        },
        // Lesson 7: Database Basics (3 quizzes)
        {
            lessonId: 7,
            question: 'What does SQL stand for?',
            options: '["Structured Query Language", "Simple Query Language", "Standard Question Language", "System Query Language"]',
            correctAnswer: 'Structured Query Language',
            explanation: 'SQL is a standardized language for managing and manipulating relational databases. It is used to query, insert, update, and delete data.',
            difficulty: 'beginner',
            xpReward: 10,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 7,
            question: 'Which SQL command retrieves data from a database?',
            options: '["SELECT", "GET", "FETCH", "RETRIEVE"]',
            correctAnswer: 'SELECT',
            explanation: 'SELECT is the fundamental SQL command for querying data. It specifies which columns to retrieve from which tables.',
            difficulty: 'beginner',
            xpReward: 12,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 7,
            question: 'What is a primary key in a database?',
            options: '["A unique identifier for each record", "The first column in a table", "A password for the database", "The main table in a database"]',
            correctAnswer: 'A unique identifier for each record',
            explanation: 'A primary key uniquely identifies each record in a table. It must be unique and cannot be null, ensuring data integrity.',
            difficulty: 'beginner',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        // Lesson 8: API Development (4 quizzes)
        {
            lessonId: 8,
            question: 'What does REST stand for in API development?',
            options: '["Representational State Transfer", "Remote Execution State Transfer", "Request State Transfer", "Responsive State Transfer"]',
            correctAnswer: 'Representational State Transfer',
            explanation: 'REST is an architectural style for designing networked applications. It uses HTTP methods and stateless communication.',
            difficulty: 'intermediate',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 8,
            question: 'Which HTTP method is used to create a new resource?',
            options: '["POST", "GET", "PUT", "DELETE"]',
            correctAnswer: 'POST',
            explanation: 'POST is used to create new resources. It sends data in the request body to the server to create a new entity.',
            difficulty: 'intermediate',
            xpReward: 18,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 8,
            question: 'What is the typical response code for a successful GET request?',
            options: '["200 OK", "201 Created", "404 Not Found", "500 Server Error"]',
            correctAnswer: '200 OK',
            explanation: '200 OK indicates a successful HTTP request. It means the server has successfully processed the request and returned the requested data.',
            difficulty: 'intermediate',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 8,
            question: 'What is JSON commonly used for in APIs?',
            options: '["Data exchange format", "Programming language", "Database type", "Authentication method"]',
            correctAnswer: 'Data exchange format',
            explanation: 'JSON (JavaScript Object Notation) is a lightweight data format used for exchanging data between client and server. It is easy to read and write.',
            difficulty: 'intermediate',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        // Lesson 9: TypeScript (3 quizzes)
        {
            lessonId: 9,
            question: 'What is TypeScript?',
            options: '["A typed superset of JavaScript", "A JavaScript framework", "A database language", "A CSS preprocessor"]',
            correctAnswer: 'A typed superset of JavaScript',
            explanation: 'TypeScript adds static typing to JavaScript, providing better tooling, error detection, and code documentation while compiling to regular JavaScript.',
            difficulty: 'intermediate',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 9,
            question: 'How do you define a type for a variable in TypeScript?',
            options: '["let name: string = \'John\'", "let name = string(\'John\')", "let string name = \'John\'", "let name: String = \'John\'"]',
            correctAnswer: 'let name: string = \'John\'',
            explanation: 'TypeScript uses a colon followed by the type after the variable name. Basic types include string, number, boolean, and more.',
            difficulty: 'intermediate',
            xpReward: 18,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 9,
            question: 'What is an interface in TypeScript?',
            options: '["A way to define the shape of an object", "A function type", "A class modifier", "A variable declaration"]',
            correctAnswer: 'A way to define the shape of an object',
            explanation: 'Interfaces define contracts for object shapes, specifying what properties and methods an object should have. They enable strong type checking.',
            difficulty: 'intermediate',
            xpReward: 20,
            createdAt: new Date().toISOString(),
        },
        // Lesson 10: Testing Basics (4 quizzes)
        {
            lessonId: 10,
            question: 'What is unit testing?',
            options: '["Testing individual components in isolation", "Testing the entire application", "Testing user interface", "Testing database connections"]',
            correctAnswer: 'Testing individual components in isolation',
            explanation: 'Unit testing focuses on testing individual units of code (functions, methods, classes) independently to ensure they work correctly.',
            difficulty: 'intermediate',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 10,
            question: 'Which framework is commonly used for testing React applications?',
            options: '["Jest", "Mocha", "Jasmine", "Karma"]',
            correctAnswer: 'Jest',
            explanation: 'Jest is a popular JavaScript testing framework maintained by Facebook, widely used with React. It provides a complete testing solution.',
            difficulty: 'intermediate',
            xpReward: 18,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 10,
            question: 'What does TDD stand for?',
            options: '["Test-Driven Development", "Technical Development Design", "Testing Development Deployment", "Total Development Duration"]',
            correctAnswer: 'Test-Driven Development',
            explanation: 'TDD is a development methodology where tests are written before the actual code. It follows a red-green-refactor cycle.',
            difficulty: 'intermediate',
            xpReward: 15,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 10,
            question: 'What is the purpose of mocking in testing?',
            options: '["To simulate dependencies and external systems", "To delete test files", "To speed up code execution", "To compress test data"]',
            correctAnswer: 'To simulate dependencies and external systems',
            explanation: 'Mocking creates fake versions of dependencies (like APIs or databases) to isolate the code being tested and make tests more reliable and faster.',
            difficulty: 'intermediate',
            xpReward: 20,
            createdAt: new Date().toISOString(),
        },
        // Lesson 11: Advanced JavaScript (3 quizzes)
        {
            lessonId: 11,
            question: 'What is a Promise in JavaScript?',
            options: '["An object representing the eventual completion of an async operation", "A synchronous function", "A data type", "A loop structure"]',
            correctAnswer: 'An object representing the eventual completion of an async operation',
            explanation: 'Promises handle asynchronous operations in JavaScript. They can be in pending, fulfilled, or rejected states and allow chaining with .then() and .catch().',
            difficulty: 'advanced',
            xpReward: 22,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 11,
            question: 'What does async/await do in JavaScript?',
            options: '["Makes asynchronous code look synchronous", "Creates parallel processes", "Speeds up code execution", "Compresses data"]',
            correctAnswer: 'Makes asynchronous code look synchronous',
            explanation: 'async/await is syntactic sugar for working with Promises. It makes asynchronous code easier to read and write by using familiar synchronous-looking syntax.',
            difficulty: 'advanced',
            xpReward: 25,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 11,
            question: 'What is closure in JavaScript?',
            options: '["A function that has access to its outer function\'s scope", "A way to close browser windows", "A method to terminate loops", "A data compression technique"]',
            correctAnswer: 'A function that has access to its outer function\'s scope',
            explanation: 'Closures allow functions to access variables from an enclosing scope even after that scope has returned. This is fundamental to JavaScript\'s functional programming.',
            difficulty: 'advanced',
            xpReward: 23,
            createdAt: new Date().toISOString(),
        },
        // Lesson 12: Advanced React (4 quizzes)
        {
            lessonId: 12,
            question: 'What is the purpose of React Context?',
            options: '["To share data across the component tree without props", "To style components", "To handle routing", "To manage forms"]',
            correctAnswer: 'To share data across the component tree without props',
            explanation: 'Context provides a way to pass data through the component tree without prop drilling. It is ideal for global data like themes or user information.',
            difficulty: 'advanced',
            xpReward: 22,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 12,
            question: 'What is React.memo used for?',
            options: '["To prevent unnecessary re-renders of components", "To store component state", "To create new components", "To handle side effects"]',
            correctAnswer: 'To prevent unnecessary re-renders of components',
            explanation: 'React.memo is a higher-order component that memoizes components, preventing re-renders when props have not changed. It optimizes performance.',
            difficulty: 'advanced',
            xpReward: 25,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 12,
            question: 'What is the useReducer hook used for?',
            options: '["Managing complex state logic", "Creating side effects", "Styling components", "Handling routing"]',
            correctAnswer: 'Managing complex state logic',
            explanation: 'useReducer is an alternative to useState for managing complex state. It works like Redux reducers and is useful when state depends on previous state.',
            difficulty: 'advanced',
            xpReward: 23,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 12,
            question: 'What are React Portals used for?',
            options: '["Rendering children into a DOM node outside the parent hierarchy", "Creating new components", "Managing state", "Handling events"]',
            correctAnswer: 'Rendering children into a DOM node outside the parent hierarchy',
            explanation: 'Portals provide a way to render children into a DOM node that exists outside the parent component\'s hierarchy, useful for modals and tooltips.',
            difficulty: 'advanced',
            xpReward: 24,
            createdAt: new Date().toISOString(),
        },
        // Lesson 13: Docker & Containers (3 quizzes)
        {
            lessonId: 13,
            question: 'What is Docker?',
            options: '["A platform for developing and running containerized applications", "A programming language", "A database system", "A web framework"]',
            correctAnswer: 'A platform for developing and running containerized applications',
            explanation: 'Docker is a containerization platform that packages applications and their dependencies into containers, ensuring consistency across different environments.',
            difficulty: 'advanced',
            xpReward: 20,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 13,
            question: 'What is a Docker image?',
            options: '["A read-only template for creating containers", "A running container instance", "A configuration file", "A network setting"]',
            correctAnswer: 'A read-only template for creating containers',
            explanation: 'Docker images are immutable templates that contain the application code, runtime, libraries, and dependencies needed to run an application.',
            difficulty: 'advanced',
            xpReward: 22,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 13,
            question: 'What command is used to build a Docker image?',
            options: '["docker build", "docker create", "docker make", "docker compile"]',
            correctAnswer: 'docker build',
            explanation: 'docker build creates a Docker image from a Dockerfile. It reads the instructions in the Dockerfile and builds the image layer by layer.',
            difficulty: 'advanced',
            xpReward: 23,
            createdAt: new Date().toISOString(),
        },
        // Lesson 14: CI/CD (4 quizzes)
        {
            lessonId: 14,
            question: 'What does CI/CD stand for?',
            options: '["Continuous Integration / Continuous Deployment", "Code Integration / Code Deployment", "Container Integration / Container Deployment", "Central Integration / Central Deployment"]',
            correctAnswer: 'Continuous Integration / Continuous Deployment',
            explanation: 'CI/CD is a development practice that automates code integration and deployment. It ensures code changes are tested and deployed frequently and reliably.',
            difficulty: 'advanced',
            xpReward: 20,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 14,
            question: 'What is the main benefit of Continuous Integration?',
            options: '["Early detection of integration issues", "Faster code writing", "Reduced code size", "Automatic bug fixes"]',
            correctAnswer: 'Early detection of integration issues',
            explanation: 'CI automatically integrates code changes frequently, running tests to catch integration issues early. This reduces merge conflicts and improves code quality.',
            difficulty: 'advanced',
            xpReward: 22,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 14,
            question: 'Which tool is commonly used for CI/CD?',
            options: '["GitHub Actions", "Visual Studio Code", "Chrome DevTools", "NPM"]',
            correctAnswer: 'GitHub Actions',
            explanation: 'GitHub Actions is a popular CI/CD platform that automates workflows. Other common tools include Jenkins, GitLab CI, and CircleCI.',
            difficulty: 'advanced',
            xpReward: 20,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 14,
            question: 'What is a pipeline in CI/CD?',
            options: '["A series of automated steps from code to deployment", "A data structure", "A programming pattern", "A testing framework"]',
            correctAnswer: 'A series of automated steps from code to deployment',
            explanation: 'A CI/CD pipeline defines the automated steps code goes through: build, test, and deploy. It ensures consistent and reliable software delivery.',
            difficulty: 'advanced',
            xpReward: 25,
            createdAt: new Date().toISOString(),
        },
        // Lesson 15: Performance Optimization (3 quizzes)
        {
            lessonId: 15,
            question: 'What is lazy loading in web development?',
            options: '["Loading resources only when needed", "Loading all resources at once", "Delaying user interactions", "Compressing images"]',
            correctAnswer: 'Loading resources only when needed',
            explanation: 'Lazy loading defers loading of non-critical resources until they are needed, improving initial page load time and reducing bandwidth usage.',
            difficulty: 'advanced',
            xpReward: 22,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 15,
            question: 'What is code splitting?',
            options: '["Breaking code into smaller chunks loaded on demand", "Writing code in multiple files", "Dividing team responsibilities", "Separating HTML and CSS"]',
            correctAnswer: 'Breaking code into smaller chunks loaded on demand',
            explanation: 'Code splitting divides your application into smaller bundles that can be loaded on demand, reducing initial load time and improving performance.',
            difficulty: 'advanced',
            xpReward: 25,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 15,
            question: 'What is memoization?',
            options: '["Caching function results to avoid recomputation", "Creating memory leaks", "Deleting cached data", "Compressing memory"]',
            correctAnswer: 'Caching function results to avoid recomputation',
            explanation: 'Memoization stores the results of expensive function calls and returns cached results when the same inputs occur, improving performance.',
            difficulty: 'advanced',
            xpReward: 23,
            createdAt: new Date().toISOString(),
        },
        // Lesson 16: Security Best Practices (4 quizzes)
        {
            lessonId: 16,
            question: 'What is XSS (Cross-Site Scripting)?',
            options: '["A security vulnerability allowing injection of malicious scripts", "A CSS framework", "A JavaScript library", "A deployment strategy"]',
            correctAnswer: 'A security vulnerability allowing injection of malicious scripts',
            explanation: 'XSS attacks inject malicious scripts into web pages viewed by other users. Prevention includes input validation and output encoding.',
            difficulty: 'advanced',
            xpReward: 22,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 16,
            question: 'What is HTTPS?',
            options: '["HTTP with encryption via SSL/TLS", "A faster version of HTTP", "A new programming language", "A database protocol"]',
            correctAnswer: 'HTTP with encryption via SSL/TLS',
            explanation: 'HTTPS encrypts data between client and server using SSL/TLS, protecting against eavesdropping and man-in-the-middle attacks.',
            difficulty: 'advanced',
            xpReward: 20,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 16,
            question: 'What is SQL injection?',
            options: '["A technique to inject malicious SQL queries", "A database optimization method", "A way to speed up queries", "A SQL function"]',
            correctAnswer: 'A technique to inject malicious SQL queries',
            explanation: 'SQL injection exploits vulnerabilities by inserting malicious SQL code. Prevention includes parameterized queries and input validation.',
            difficulty: 'advanced',
            xpReward: 25,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 16,
            question: 'What is JWT used for?',
            options: '["Securely transmitting information between parties", "Styling web pages", "Database queries", "File compression"]',
            correctAnswer: 'Securely transmitting information between parties',
            explanation: 'JSON Web Tokens (JWT) are used for authentication and information exchange. They are digitally signed and can be verified and trusted.',
            difficulty: 'advanced',
            xpReward: 23,
            createdAt: new Date().toISOString(),
        },
        // Lesson 17: Cloud Services (3 quizzes)
        {
            lessonId: 17,
            question: 'What is cloud computing?',
            options: '["Delivery of computing services over the internet", "A weather prediction system", "A data storage device", "A programming paradigm"]',
            correctAnswer: 'Delivery of computing services over the internet',
            explanation: 'Cloud computing provides on-demand access to computing resources (servers, storage, databases) over the internet, offering scalability and flexibility.',
            difficulty: 'advanced',
            xpReward: 20,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 17,
            question: 'What is AWS?',
            options: '["Amazon Web Services - a cloud computing platform", "A web development framework", "A database system", "A programming language"]',
            correctAnswer: 'Amazon Web Services - a cloud computing platform',
            explanation: 'AWS is Amazon\'s comprehensive cloud platform offering over 200 services including computing, storage, databases, and machine learning.',
            difficulty: 'advanced',
            xpReward: 22,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 17,
            question: 'What is serverless computing?',
            options: '["Running applications without managing servers", "Computing without internet", "A server-side framework", "A database type"]',
            correctAnswer: 'Running applications without managing servers',
            explanation: 'Serverless computing abstracts server management, automatically scaling resources. Developers focus on code while the cloud provider handles infrastructure.',
            difficulty: 'advanced',
            xpReward: 25,
            createdAt: new Date().toISOString(),
        },
        // Lesson 18: GraphQL (4 quizzes)
        {
            lessonId: 18,
            question: 'What is GraphQL?',
            options: '["A query language for APIs", "A database", "A programming language", "A web framework"]',
            correctAnswer: 'A query language for APIs',
            explanation: 'GraphQL is a query language for APIs that allows clients to request exactly the data they need, making APIs more flexible and efficient.',
            difficulty: 'advanced',
            xpReward: 20,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 18,
            question: 'What is the main advantage of GraphQL over REST?',
            options: '["Clients can request exactly the data they need", "Faster execution", "Better security", "Easier to learn"]',
            correctAnswer: 'Clients can request exactly the data they need',
            explanation: 'GraphQL eliminates over-fetching and under-fetching by allowing clients to specify exactly what data they need in a single request.',
            difficulty: 'advanced',
            xpReward: 23,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 18,
            question: 'What is a GraphQL schema?',
            options: '["Defines the types and structure of data available", "A database table", "A CSS file", "A configuration file"]',
            correctAnswer: 'Defines the types and structure of data available',
            explanation: 'The GraphQL schema defines the shape of your data and the queries that can be performed. It serves as a contract between client and server.',
            difficulty: 'advanced',
            xpReward: 22,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 18,
            question: 'What are resolvers in GraphQL?',
            options: '["Functions that fetch data for schema fields", "Database queries", "Error handlers", "Authentication methods"]',
            correctAnswer: 'Functions that fetch data for schema fields',
            explanation: 'Resolvers are functions that resolve a value for a type or field in a schema. They fetch the actual data from databases or other sources.',
            difficulty: 'advanced',
            xpReward: 25,
            createdAt: new Date().toISOString(),
        },
        // Lesson 19: Microservices (3 quizzes)
        {
            lessonId: 19,
            question: 'What is microservices architecture?',
            options: '["Breaking applications into small, independent services", "A single large application", "A database design pattern", "A front-end framework"]',
            correctAnswer: 'Breaking applications into small, independent services',
            explanation: 'Microservices architecture structures an application as a collection of loosely coupled services, each focused on a specific business capability.',
            difficulty: 'advanced',
            xpReward: 22,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 19,
            question: 'What is the main benefit of microservices?',
            options: '["Independent deployment and scaling of services", "Easier to write code", "Reduced costs", "Faster initial development"]',
            correctAnswer: 'Independent deployment and scaling of services',
            explanation: 'Microservices allow teams to develop, deploy, and scale services independently, improving agility and enabling continuous delivery.',
            difficulty: 'advanced',
            xpReward: 25,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 19,
            question: 'What is service discovery in microservices?',
            options: '["Automatically detecting and connecting to services", "Finding bugs in services", "Measuring service performance", "Encrypting service communication"]',
            correctAnswer: 'Automatically detecting and connecting to services',
            explanation: 'Service discovery enables services to find and communicate with each other dynamically, essential in distributed microservices architectures.',
            difficulty: 'advanced',
            xpReward: 23,
            createdAt: new Date().toISOString(),
        },
        // Lesson 20: Machine Learning Basics (4 quizzes)
        {
            lessonId: 20,
            question: 'What is machine learning?',
            options: '["A field of AI that enables systems to learn from data", "A programming language", "A database system", "A web framework"]',
            correctAnswer: 'A field of AI that enables systems to learn from data',
            explanation: 'Machine learning uses algorithms to analyze data, learn patterns, and make predictions without being explicitly programmed for specific tasks.',
            difficulty: 'advanced',
            xpReward: 20,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 20,
            question: 'What is supervised learning?',
            options: '["Learning from labeled training data", "Learning without any data", "Learning from unlabeled data", "Learning by trial and error"]',
            correctAnswer: 'Learning from labeled training data',
            explanation: 'Supervised learning uses labeled datasets where the correct answers are provided. The model learns to predict outputs from inputs.',
            difficulty: 'advanced',
            xpReward: 23,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 20,
            question: 'What is a neural network?',
            options: '["A computing system inspired by biological neural networks", "A computer network", "A database structure", "A web service"]',
            correctAnswer: 'A computing system inspired by biological neural networks',
            explanation: 'Neural networks are interconnected nodes (neurons) that process data through layers, learning complex patterns through training.',
            difficulty: 'advanced',
            xpReward: 25,
            createdAt: new Date().toISOString(),
        },
        {
            lessonId: 20,
            question: 'What is TensorFlow?',
            options: '["An open-source machine learning framework", "A JavaScript framework", "A database", "A testing library"]',
            correctAnswer: 'An open-source machine learning framework',
            explanation: 'TensorFlow is a comprehensive framework for machine learning developed by Google, used for building and training neural networks.',
            difficulty: 'advanced',
            xpReward: 22,
            createdAt: new Date().toISOString(),
        },
    ];

    await db.insert(quizzes).values(sampleQuizzes);
    
    console.log('✅ Quizzes seeder completed successfully');
}

main().catch((error) => {
    console.error('❌ Seeder failed:', error);
});