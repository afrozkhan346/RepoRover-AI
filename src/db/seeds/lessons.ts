import { db } from '@/db';
import { lessons } from '@/db/schema';

async function main() {
    const sampleLessons = [
        // JavaScript Basics (learningPathId: 1)
        {
            learningPathId: 1,
            title: 'Introduction to JavaScript',
            description: 'Learn the fundamentals of JavaScript and its role in web development.',
            content: 'JavaScript is the programming language of the web, enabling interactive and dynamic content on websites. In this lesson, you will explore what JavaScript is, where it runs, and how it interacts with HTML and CSS. You will also set up your development environment and write your first JavaScript program to understand the basics of syntax and execution.',
            difficulty: 'beginner',
            xpReward: 50,
            orderIndex: 1,
            estimatedMinutes: 30,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 1,
            title: 'Variables and Data Types',
            description: 'Master JavaScript variables, data types, and type conversion.',
            content: 'Variables are containers for storing data values in JavaScript. This lesson covers the different ways to declare variables using var, let, and const, and explores the various data types including strings, numbers, booleans, null, and undefined. You will learn about type coercion, type checking, and best practices for naming variables. Understanding data types is fundamental to writing effective JavaScript code.',
            difficulty: 'beginner',
            xpReward: 75,
            orderIndex: 2,
            estimatedMinutes: 45,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 1,
            title: 'Functions and Scope',
            description: 'Understand functions, parameters, return values, and variable scope.',
            content: 'Functions are reusable blocks of code that perform specific tasks. You will learn how to declare and invoke functions, pass parameters, and return values. This lesson also covers function scope, including global and local scope, and introduces modern JavaScript features like arrow functions and default parameters. Mastering functions is essential for writing organized and maintainable code.',
            difficulty: 'beginner',
            xpReward: 100,
            orderIndex: 3,
            estimatedMinutes: 60,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 1,
            title: 'Arrays and Objects',
            description: 'Work with arrays and objects to store and manipulate complex data.',
            content: 'Arrays and objects are fundamental data structures in JavaScript for storing collections of data. Learn how to create, access, and modify arrays using various methods like push, pop, map, and filter. Explore objects and their properties, methods, and how to access data using dot and bracket notation. This lesson provides the foundation for working with more complex data structures and JSON.',
            difficulty: 'beginner',
            xpReward: 100,
            orderIndex: 4,
            estimatedMinutes: 50,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 1,
            title: 'Loops and Iteration',
            description: 'Master different types of loops to iterate over data efficiently.',
            content: 'Loops allow you to execute code repeatedly, which is essential for processing collections of data. This lesson covers for loops, while loops, do-while loops, and modern iteration methods like forEach, map, and reduce. You will learn when to use each type of loop, how to control loop execution with break and continue, and best practices for writing efficient iterative code.',
            difficulty: 'beginner',
            xpReward: 75,
            orderIndex: 5,
            estimatedMinutes: 40,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 1,
            title: 'DOM Manipulation Basics',
            description: 'Learn to select and manipulate HTML elements using JavaScript.',
            content: 'The Document Object Model (DOM) is the programming interface for HTML documents. In this lesson, you will learn how to select elements using methods like getElementById, querySelector, and getElementsByClassName. Explore how to create, modify, and remove elements dynamically, change styles and attributes, and understand the relationship between parent and child elements. DOM manipulation is key to creating interactive web applications.',
            difficulty: 'beginner',
            xpReward: 125,
            orderIndex: 6,
            estimatedMinutes: 70,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 1,
            title: 'Event Handling',
            description: 'Respond to user interactions with event listeners and handlers.',
            content: 'Events are actions that occur in the browser, such as clicks, keyboard input, or page loads. Learn how to attach event listeners to elements, handle different types of events, and understand event propagation including bubbling and capturing. This lesson covers event objects, preventing default behavior, and best practices for writing clean event handlers. Mastering events enables you to create responsive and interactive user experiences.',
            difficulty: 'beginner',
            xpReward: 100,
            orderIndex: 7,
            estimatedMinutes: 55,
            createdAt: new Date().toISOString(),
        },

        // Python Fundamentals (learningPathId: 2)
        {
            learningPathId: 2,
            title: 'Python Syntax and Basics',
            description: 'Get started with Python programming fundamentals and syntax rules.',
            content: 'Python is known for its clean and readable syntax, making it an excellent language for beginners. This lesson introduces Python basics including indentation rules, comments, print statements, and basic input/output operations. You will learn about Python\'s interactive interpreter, how to write and execute Python scripts, and understand the importance of proper code formatting. These fundamentals set the foundation for all future Python programming.',
            difficulty: 'beginner',
            xpReward: 50,
            orderIndex: 1,
            estimatedMinutes: 35,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 2,
            title: 'Data Types and Variables',
            description: 'Explore Python data types, variables, and type conversion.',
            content: 'Python supports various data types including integers, floats, strings, and booleans. Learn how to declare variables without explicit type declarations, perform type conversion, and use operators for different data types. This lesson covers string manipulation, numeric operations, and introduces the concept of dynamic typing in Python. Understanding data types is crucial for effective data manipulation and algorithm implementation.',
            difficulty: 'beginner',
            xpReward: 75,
            orderIndex: 2,
            estimatedMinutes: 45,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 2,
            title: 'Control Flow Statements',
            description: 'Master conditional statements and control program flow.',
            content: 'Control flow statements determine the order in which code is executed. Learn how to use if, elif, and else statements to make decisions in your programs. Explore comparison and logical operators, understand truthiness and falsiness in Python, and write complex conditional expressions. This lesson also covers the ternary operator and best practices for writing readable conditional code.',
            difficulty: 'beginner',
            xpReward: 100,
            orderIndex: 3,
            estimatedMinutes: 50,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 2,
            title: 'Functions and Modules',
            description: 'Create reusable functions and organize code with modules.',
            content: 'Functions in Python are defined using the def keyword and can accept parameters and return values. Learn about function arguments, default parameters, *args and **kwargs, and variable scope. This lesson also introduces modules and how to import functionality from Python\'s standard library and custom modules. Understanding functions and modules is essential for writing organized, maintainable, and reusable code.',
            difficulty: 'beginner',
            xpReward: 125,
            orderIndex: 4,
            estimatedMinutes: 60,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 2,
            title: 'Lists and Dictionaries',
            description: 'Work with Python\'s powerful list and dictionary data structures.',
            content: 'Lists and dictionaries are fundamental data structures in Python for storing collections. Explore list operations including slicing, appending, extending, and list comprehensions. Learn how dictionaries store key-value pairs and how to access, modify, and iterate over dictionary items. This lesson covers common methods for both data structures and introduces nested structures. Mastering these collections is crucial for data manipulation and algorithm implementation.',
            difficulty: 'beginner',
            xpReward: 100,
            orderIndex: 5,
            estimatedMinutes: 55,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 2,
            title: 'Object-Oriented Programming',
            description: 'Learn OOP concepts including classes, objects, and inheritance.',
            content: 'Object-Oriented Programming (OOP) is a programming paradigm based on objects and classes. Learn how to define classes, create objects, and work with attributes and methods. This lesson covers core OOP concepts including encapsulation, inheritance, polymorphism, and the use of special methods like __init__ and __str__. Understanding OOP enables you to write more organized code and model real-world entities effectively.',
            difficulty: 'intermediate',
            xpReward: 150,
            orderIndex: 6,
            estimatedMinutes: 80,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 2,
            title: 'File Handling',
            description: 'Read from and write to files using Python file operations.',
            content: 'File handling is essential for persisting data and working with external resources. Learn how to open, read, write, and close files using Python\'s built-in file operations. Explore different file modes, the with statement for proper resource management, and techniques for reading large files efficiently. This lesson also covers working with different file formats and handling file exceptions. File handling skills are crucial for many real-world applications.',
            difficulty: 'beginner',
            xpReward: 100,
            orderIndex: 7,
            estimatedMinutes: 50,
            createdAt: new Date().toISOString(),
        },

        // React Mastery (learningPathId: 3)
        {
            learningPathId: 3,
            title: 'React Fundamentals',
            description: 'Understand React basics, JSX syntax, and component structure.',
            content: 'React is a powerful JavaScript library for building user interfaces through reusable components. This lesson introduces React\'s core concepts including JSX syntax, the virtual DOM, and component-based architecture. You will learn how to set up a React development environment, create your first components, and understand the difference between React and traditional JavaScript DOM manipulation. These fundamentals are essential for building modern web applications.',
            difficulty: 'intermediate',
            xpReward: 100,
            orderIndex: 1,
            estimatedMinutes: 60,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 3,
            title: 'Components and Props',
            description: 'Build reusable components and pass data using props.',
            content: 'Components are the building blocks of React applications. Learn how to create functional and class components, understand component composition, and pass data between components using props. This lesson covers props validation with PropTypes, default props, and the concept of component reusability. You will also explore best practices for component design and learn how to structure your React applications effectively.',
            difficulty: 'intermediate',
            xpReward: 125,
            orderIndex: 2,
            estimatedMinutes: 70,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 3,
            title: 'State and Lifecycle',
            description: 'Manage component state and understand React component lifecycle.',
            content: 'State allows components to manage and respond to changing data. Learn how to initialize and update state in class components, understand the component lifecycle methods, and handle component mounting, updating, and unmounting. This lesson covers setState, the asynchronous nature of state updates, and lifecycle methods like componentDidMount and componentDidUpdate. Understanding state and lifecycle is crucial for building dynamic, interactive React applications.',
            difficulty: 'intermediate',
            xpReward: 150,
            orderIndex: 3,
            estimatedMinutes: 80,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 3,
            title: 'React Hooks',
            description: 'Master modern React with useState, useEffect, and custom hooks.',
            content: 'Hooks are functions that let you use state and other React features in functional components. Learn how to use useState for state management, useEffect for side effects, and other built-in hooks like useContext, useReducer, and useMemo. This lesson also covers the rules of hooks and how to create custom hooks for reusable logic. Hooks represent the modern way of writing React components and are essential for current React development.',
            difficulty: 'intermediate',
            xpReward: 175,
            orderIndex: 4,
            estimatedMinutes: 90,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 3,
            title: 'Context API',
            description: 'Share data across components without prop drilling using Context.',
            content: 'The Context API provides a way to pass data through the component tree without manually passing props at every level. Learn how to create context, provide values to consuming components, and use the useContext hook. This lesson covers common use cases for Context including theme management and authentication state. Understanding Context API helps you manage global state and avoid prop drilling in larger applications.',
            difficulty: 'intermediate',
            xpReward: 150,
            orderIndex: 5,
            estimatedMinutes: 75,
            createdAt: new Date().toISOString(),
        },
        {
            learningPathId: 3,
            title: 'React Router',
            description: 'Implement client-side routing for single-page applications.',
            content: 'React Router enables navigation between different views in single-page applications. Learn how to set up routing, create routes with Route components, navigate programmatically, and pass parameters through URLs. This lesson covers nested routes, protected routes, and route guards for authentication. You will also explore browser history manipulation and understand how to structure navigation in React applications. Routing is essential for building multi-page React applications.',
            difficulty: 'intermediate',
            xpReward: 150,
            orderIndex: 6,
            estimatedMinutes: 70,
            createdAt: new Date().toISOString(),
        },
    ];

    await db.insert(lessons).values(sampleLessons);
    
    console.log('✅ Lessons seeder completed successfully');
}

main().catch((error) => {
    console.error('❌ Seeder failed:', error);
});